import{_ as s,o as a,c as n,R as i}from"./chunks/framework.FL0bwkQZ.js";const k=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"src/notes/JavaScript.md","filePath":"src/notes/JavaScript.md","lastUpdated":1700831538000}'),e={name:"src/notes/JavaScript.md"},p=i(`<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h1><h2 id="第一章-什么是javascript" tabindex="-1">第一章 什么是JavaScript <a class="header-anchor" href="#第一章-什么是javascript" aria-label="Permalink to &quot;第一章 什么是JavaScript&quot;">​</a></h2><h3 id="_1-1-javascript历史" tabindex="-1">1.1 JavaScript历史 <a class="header-anchor" href="#_1-1-javascript历史" aria-label="Permalink to &quot;1.1 JavaScript历史&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>JavaScript诞生于1995年 原名叫(LiveScript)</span></span>
<span class="line"><span>1997年,JavaScript 1.1作为提案被提交给欧洲计算机制造商协会(Ecma) . 第39技术委员会(TC39).承担了&quot;标准化一门通用,跨平台,厂商中立的脚本语言的语法和语义&quot;的任务.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_1-2-javascript的实现" tabindex="-1">1.2 JavaScript的实现 <a class="header-anchor" href="#_1-2-javascript的实现" aria-label="Permalink to &quot;1.2 JavaScript的实现&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>JavaScript是由 ECMAScript + DOM + BOM 组成</span></span>
<span class="line"><span></span></span>
<span class="line"><span>核心(ECMAScript) + 文档对象模型(DOM) + 浏览器对象模型(BOM)</span></span>
<span class="line"><span>DOM document</span></span>
<span class="line"><span>BOM window location navigator screen history</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="第二章-html中的javascript" tabindex="-1">第二章 HTML中的JavaScript <a class="header-anchor" href="#第二章-html中的javascript" aria-label="Permalink to &quot;第二章 HTML中的JavaScript&quot;">​</a></h2><h3 id="_2-1-script-元素" tabindex="-1">2.1 &lt;script&gt;元素 <a class="header-anchor" href="#_2-1-script-元素" aria-label="Permalink to &quot;2.1 \\&lt;script&gt;元素&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>scr属性: 设置外部文件的url地址或本地文件地址</span></span>
<span class="line"><span>defer属性: 可是使得js代码等到文档完全解析完成在解析当前js文件</span></span>
<span class="line"><span>async属性: 异步加载js文件 但不能保证js文件加载顺序</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-2-行内代码" tabindex="-1">2.2 行内代码 <a class="header-anchor" href="#_2-2-行内代码" aria-label="Permalink to &quot;2.2 行内代码&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>虽然可以直接在HTML文件中嵌入JavaScript代码 但通常认为尽可能把代码放入外部文件当中, 优势主要有 可维护性高 浏览器可缓存 适应未来</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-3-文档模式" tabindex="-1">2.3 文档模式 <a class="header-anchor" href="#_2-3-文档模式" aria-label="Permalink to &quot;2.3 文档模式&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>分为混杂模式和标准模式 主要区别在于如何对待图片元素周围的空白(在表格中使用图片最明显)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-4-noscript-元素" tabindex="-1">2.4 &lt;noscript&gt;元素 <a class="header-anchor" href="#_2-4-noscript-元素" aria-label="Permalink to &quot;2.4 \\&lt;noscript&gt;元素&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>noscript 只有浏览器不支持脚本 或者 浏览器对脚本的支持关闭 才会显示其中的内容否则不会显示</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="第三章-语言基础" tabindex="-1">第三章 语言基础 <a class="header-anchor" href="#第三章-语言基础" aria-label="Permalink to &quot;第三章 语言基础&quot;">​</a></h2><h3 id="_3-1语法" tabindex="-1">3.1语法 <a class="header-anchor" href="#_3-1语法" aria-label="Permalink to &quot;3.1语法&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>一切都区分大小写 无论是变量,函数名,操作符都区分大小写</span></span>
<span class="line"><span>标识符: 第一个字必须是 字母, 下划线, 美元符, 或者数字</span></span>
<span class="line"><span>注释: 单行注释 // 或者 多行注释 /* */</span></span>
<span class="line"><span>严格模式: 在文件首行添加字符串 &quot;use strict&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3-2-关键字与保留字" tabindex="-1">3.2 关键字与保留字 <a class="header-anchor" href="#_3-2-关键字与保留字" aria-label="Permalink to &quot;3.2 关键字与保留字&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>关键字: break do in typeof case else instanceof var class extends return while const finally super with continue for switch yield debugger function this default if throw delete import try</span></span>
<span class="line"><span>保留字:始终保留: enum 严格模式下保留: implements package public interface protected static let private 模板代码中保留: await</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_3-3-变量" tabindex="-1">3.3 变量 <a class="header-anchor" href="#_3-3-变量" aria-label="Permalink to &quot;3.3 变量&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>变量声明:</span></span>
<span class="line"><span> var 函数的局部作用于 可以重复定义 存在变量提升问题</span></span>
<span class="line"><span> let 代码块作用域  重复定义会报错 不存在变量提升问题</span></span>
<span class="line"><span>    const 代码块作用域 顶层不可修改 修改会报错 不存在变量提升    问题</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3-4-数据类型" tabindex="-1">3.4 数据类型 <a class="header-anchor" href="#_3-4-数据类型" aria-label="Permalink to &quot;3.4 数据类型&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>typeof 数据类型判断</span></span>
<span class="line"><span>Undefined 类型</span></span>
<span class="line"><span>Number 类型</span></span>
<span class="line"><span>String 类型</span></span>
<span class="line"><span>Object 类型</span></span>
<span class="line"><span>Boolean 类型</span></span>
<span class="line"><span>Null 类型</span></span>
<span class="line"><span>Symbol 类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_3-5-操作符" tabindex="-1">3.5 操作符 <a class="header-anchor" href="#_3-5-操作符" aria-label="Permalink to &quot;3.5 操作符&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>非数字类型会使用Number()进行转换 操作符遇到对象视情况而定使用对象的valueOf()或toString()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>一元操作符: 单个变量进行运算操作  (+)(-)</span></span>
<span class="line"><span>位操作符: 二进制数转十进制 ((2**当前位数) * 当前值) + .....</span></span>
<span class="line"><span>布尔操作符: 逻辑非(!) 取反, 逻辑与(&amp;&amp;) 看前面一个值是否是对象或为true 返回后一个值,否则与之相反  逻辑或(||)  看前面一个是否是对象或者为true 返回前面一个,否则与之相反</span></span>
<span class="line"><span>乘性操作符:  (*) (/)</span></span>
<span class="line"><span>指数操作符:  (**)</span></span>
<span class="line"><span>加性操作符: 两个变量进行运算操作 (+) (-)</span></span>
<span class="line"><span>关系操作符:(&gt;) (&lt;) (&lt;=) (&gt;=)  返回值为布尔值</span></span>
<span class="line"><span>相等操作符: (==) (!=) 会进行类型转换比较 (===) (!==)进行类型比较 类型相等进行判等比较</span></span>
<span class="line"><span>条件操作符: 就是三元运算符  boolean类型 ? 变量A : 变量B</span></span>
<span class="line"><span>赋值操作符:(*=) (+=) (-=) (%=) (/=) (&lt;&lt;=) (&gt;&gt;=) (&gt;&gt;&gt;=)</span></span>
<span class="line"><span>逗号操作符: 可以进行分隔操作 但是在赋值操作中 去最后一个逗号后面的</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_3-6-语句" tabindex="-1">3.6 语句 <a class="header-anchor" href="#_3-6-语句" aria-label="Permalink to &quot;3.6 语句&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>if 语句</span></span>
<span class="line"><span>do-while 语句</span></span>
<span class="line"><span>while 语句</span></span>
<span class="line"><span>for for-in for-of 语句</span></span>
<span class="line"><span>标签语句</span></span>
<span class="line"><span>break 和 continue 语句</span></span>
<span class="line"><span>with 语句</span></span>
<span class="line"><span>switch 语句</span></span>
<span class="line"><span>函数</span></span>
<span class="line"><span></span></span>
<span class="line"><span>标签语句:</span></span>
<span class="line"><span>start: for (let i = 0;i &lt; count; i ++){</span></span>
<span class="line"><span> console.log(i) // 这里的start就是标签</span></span>
<span class="line"><span> 可以使用 break start 退出到指定位置</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="第五章-基本引用类型" tabindex="-1">第五章 基本引用类型 <a class="header-anchor" href="#第五章-基本引用类型" aria-label="Permalink to &quot;第五章 基本引用类型&quot;">​</a></h2><h3 id="_5-1-date" tabindex="-1">5.1 Date <a class="header-anchor" href="#_5-1-date" aria-label="Permalink to &quot;5.1 Date&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">获取时间毫秒数</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">获取年份</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFullyear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">获取月份</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMonth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">获取日</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">获取星期几</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">获取小时</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHours</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">获取分钟</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMinutes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">获取秒</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">获取毫秒</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMilliseconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_5-2-regexp" tabindex="-1">5.2 RegExp <a class="header-anchor" href="#_5-2-regexp" aria-label="Permalink to &quot;5.2 RegExp&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_5-3-原始值包装类型" tabindex="-1">5.3 原始值包装类型 <a class="header-anchor" href="#_5-3-原始值包装类型" aria-label="Permalink to &quot;5.3 原始值包装类型&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Boolean Number String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) 返回包含指定小数点位数值字符串</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 判断是个数值是否为整数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">字符串的操作方法</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str) 用于将一个或者多个字符串拼接成一个新的字符串</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">substr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 方法 字符串截取</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str) 返回字符在字符串中的位置没有找到返回</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str) 判断子字符串是否在字符串中 返回布尔值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 去除字符串两边的空白</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) 复制3次字符串</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padEnd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 复制字符串 第一个参数是复制的长度第二个参数 如果长度没有达到默认用第二个参数填补</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLocaleLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 将字符串转为小写</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLocaleUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 将字符串转为大写</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 字符串匹配方法 参数可传正则</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_5-4-单列内置对象" tabindex="-1">5.4 单列内置对象 <a class="header-anchor" href="#_5-4-单列内置对象" aria-label="Permalink to &quot;5.4 单列内置对象&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Global对象  其实就是平常使用的全局方法比如 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isFinite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParseFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">URL编码方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">编码</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeURIComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">解码</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decodeURIComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 该方法可以看做一个完整的JavaScript解释器 可以执行js代码 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;console.log(&#39;hello world&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window对象 document对象</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 最大值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 最小值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ceil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 向上取整</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 向下取整</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">round</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 四舍五入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 返回0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1的随机小数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">生成 min</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max的随机数</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(max</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">min</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">min)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="第六章-集合引用类型" tabindex="-1">第六章 集合引用类型 <a class="header-anchor" href="#第六章-集合引用类型" aria-label="Permalink to &quot;第六章 集合引用类型&quot;">​</a></h2><h3 id="_6-1-object" tabindex="-1">6.1 Object <a class="header-anchor" href="#_6-1-object" aria-label="Permalink to &quot;6.1 Object&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>对象创建方式: </span></span>
<span class="line"><span>const obj = new Object() 或者字面量 const obj = {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_6-2-array" tabindex="-1">6.2 Array <a class="header-anchor" href="#_6-2-array" aria-label="Permalink to &quot;6.2 Array&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>数组创建方式:</span></span>
<span class="line"><span>const arr = new Array() 或者字面量 const arr = []</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Array静态方法: Array.from() Array.of()  创建数组 参数为可迭代对象</span></span>
<span class="line"><span></span></span>
<span class="line"><span>数组可以用逗号 ,  占位 未赋值的为undefined</span></span>
<span class="line"><span>可以直接修改arr.length 来修改数组长度</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Array.isArray() 可以检测是否为数组</span></span>
<span class="line"><span></span></span>
<span class="line"><span>迭代器方法: keys() values() entries() 返回的都是迭代器</span></span>
<span class="line"><span></span></span>
<span class="line"><span>栈方法: push() 在最后一个位置添加 pop() 删除最后一个元素</span></span>
<span class="line"><span></span></span>
<span class="line"><span>队列方法: shift() 删除数组第一个元素并返回 unshift()在第一个位置添加元素</span></span>
<span class="line"><span></span></span>
<span class="line"><span>排序方法: reverse() 数组反转 sort((a,b)=&gt;a-b) 可以传一个函数 </span></span>
<span class="line"><span>                                  </span></span>
<span class="line"><span>操作方法: concat() 合并数组 slice() 切割数组 </span></span>
<span class="line"><span>splice(1,2,3)第一个参数索引 第二个参数删除个数 第三个添加元素 </span></span>
<span class="line"><span></span></span>
<span class="line"><span>find((value,index,arr)=&gt;value==1) 查找元素 满足条件退出不在继续匹配</span></span>
<span class="line"><span></span></span>
<span class="line"><span>迭代方法:</span></span>
<span class="line"><span>一下方法都需传入函数</span></span>
<span class="line"><span>(value,index,arr)=&gt; boolea</span></span>
<span class="line"><span>arr.every() arr.some() 返回布尔类型 判断是否满足条件</span></span>
<span class="line"><span>arr.filter() 过滤数组</span></span>
<span class="line"><span>arr.forEach() 遍历数组</span></span>
<span class="line"><span>arr.map() 根据返回结果构成新数组</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="_6-4-map" tabindex="-1">6.4 Map <a class="header-anchor" href="#_6-4-map" aria-label="Permalink to &quot;6.4 Map&quot;">​</a></h3><h3 id="_6-6-set" tabindex="-1">6.6 Set <a class="header-anchor" href="#_6-6-set" aria-label="Permalink to &quot;6.6 Set&quot;">​</a></h3><p>​</p><h2 id="第十章-函数" tabindex="-1">第十章 函数 <a class="header-anchor" href="#第十章-函数" aria-label="Permalink to &quot;第十章 函数&quot;">​</a></h2><h3 id="_10-1-箭头函数" tabindex="-1">10.1 箭头函数 <a class="header-anchor" href="#_10-1-箭头函数" aria-label="Permalink to &quot;10.1 箭头函数&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>()=&gt;{return }</span></span>
<span class="line"><span>只有一个参数可以不写括号</span></span>
<span class="line"><span>函数体只有一行可以不不写大括号 默认返回函数体执行结果 没有返回undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_10-2-函数名" tabindex="-1">10.2 函数名 <a class="header-anchor" href="#_10-2-函数名" aria-label="Permalink to &quot;10.2 函数名&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>函数名其实是指向函数的指针 函数名==指针 指针 + () 可以调用函数</span></span>
<span class="line"><span>指针.name 可以获取函数名的字符串结果</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_10-3-理解参数" tabindex="-1">10.3 理解参数 <a class="header-anchor" href="#_10-3-理解参数" aria-label="Permalink to &quot;10.3 理解参数&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>函数的参数都不是必传的  </span></span>
<span class="line"><span>也可以不写命名参数</span></span>
<span class="line"><span>如果没有写命名参数 可以从函数中 arguments里面获取值</span></span>
<span class="line"><span>arguments是一个数组  但不是 Array的实例</span></span>
<span class="line"><span></span></span>
<span class="line"><span>箭头函数中没有arguments</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_10-4-没有重载" tabindex="-1">10.4 没有重载 <a class="header-anchor" href="#_10-4-没有重载" aria-label="Permalink to &quot;10.4 没有重载&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>默认没有重载</span></span>
<span class="line"><span>如果重新定义函数默认会覆盖之间的定义</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_10-5-默认参数值" tabindex="-1">10.5 默认参数值 <a class="header-anchor" href="#_10-5-默认参数值" aria-label="Permalink to &quot;10.5 默认参数值&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>只需要在定义时括号内写 (name=&#39;慧慧子&#39;)</span></span>
<span class="line"><span>如果传了使用传过来的结果 没传使用默认参数</span></span>
<span class="line"><span>还可以写成 (name=nikename)</span></span>
<span class="line"><span>默认参数可以写变量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_10-6-参数扩展与收集" tabindex="-1">10.6 参数扩展与收集 <a class="header-anchor" href="#_10-6-参数扩展与收集" aria-label="Permalink to &quot;10.6 参数扩展与收集&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>扩展参数可以使用三个点来解构 ...arr 后面跟着的是一个可迭代对象</span></span>
<span class="line"><span>如果还有命名参数 扩展参数必须写在命名参数后面  因为不确定 可迭代对象里面有多少值 可能会发生位置错乱</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_10-7-函数申明与函数表达式" tabindex="-1">10.7 函数申明与函数表达式 <a class="header-anchor" href="#_10-7-函数申明与函数表达式" aria-label="Permalink to &quot;10.7 函数申明与函数表达式&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>如果是用函数声明的方式定义的函数 调用该函数的时候不需要在乎调用位置 因为 函数声明会提升 全部提升到源代码顶部</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_10-8-函数作为值" tabindex="-1">10.8 函数作为值 <a class="header-anchor" href="#_10-8-函数作为值" aria-label="Permalink to &quot;10.8 函数作为值&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>函数也可以作为一个值来给别处使用 比如说常见的闭包</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_10-9-函数内部" tabindex="-1">10.9 函数内部 <a class="header-anchor" href="#_10-9-函数内部" aria-label="Permalink to &quot;10.9 函数内部&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>函数内部存在两个特殊的对象 arguments 和 this</span></span>
<span class="line"><span>arguments对象有一个属性callee 该属性指向的是函数的指针</span></span>
<span class="line"><span>可以通过该属性来调用当前函数</span></span>
<span class="line"><span></span></span>
<span class="line"><span>this 如果在全局中指向的是window</span></span>
<span class="line"><span>在箭头函数中指向的是箭头函数的上下文</span></span>
<span class="line"><span></span></span>
<span class="line"><span>caller属性可以获取谁调用的它</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_10-10-函数属性与方法" tabindex="-1">10.10 函数属性与方法 <a class="header-anchor" href="#_10-10-函数属性与方法" aria-label="Permalink to &quot;10.10 函数属性与方法&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>每个函数都有两个属性和方法 length prototype</span></span>
<span class="line"><span>length 是函数命名参数的个数</span></span>
<span class="line"><span>prototype 原型链 tostring() valueof() 都是放在原型链上</span></span>
<span class="line"><span></span></span>
<span class="line"><span>call() apply() bind()</span></span>
<span class="line"><span>第一个参数都是this上下文 指定当前函数this指向 call apply 都是直接调用函数 区别是第二个参数传入方式不同  bind 是返回一个函数指针后续调用</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_10-11-函数表达式" tabindex="-1">10.11 函数表达式 <a class="header-anchor" href="#_10-11-函数表达式" aria-label="Permalink to &quot;10.11 函数表达式&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function(){} 匿名函数 兰姆达</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_10-12-递归" tabindex="-1">10.12 递归 <a class="header-anchor" href="#_10-12-递归" aria-label="Permalink to &quot;10.12 递归&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自己调用自己</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_10-13-尾调用优化" tabindex="-1">10.13 尾调用优化 <a class="header-anchor" href="#_10-13-尾调用优化" aria-label="Permalink to &quot;10.13 尾调用优化&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function waibu(){</span></span>
<span class="line"><span> return neibu()</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_10-14-闭包" tabindex="-1">10.14 闭包 <a class="header-anchor" href="#_10-14-闭包" aria-label="Permalink to &quot;10.14 闭包&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>闭包指的是那些引用了另一个函数作用域中的变量的函数  通常函数嵌套内存函数引用了外层函数的变量就叫做闭包   </span></span>
<span class="line"><span></span></span>
<span class="line"><span>闭包会占用内存比较多</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>this</span></span>
<span class="line"><span></span></span>
<span class="line"><span>谁调用this指向谁   不确定很模糊指向window</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_10-15-立即调用的函数表达式" tabindex="-1">10.15 立即调用的函数表达式 <a class="header-anchor" href="#_10-15-立即调用的函数表达式" aria-label="Permalink to &quot;10.15 立即调用的函数表达式&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>(function(){})();  函数的自调用  </span></span>
<span class="line"><span>自调用函数会产生一个块级作用域 外部不能访问函数内部</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_10-16-私有变量" tabindex="-1">10.16 私有变量 <a class="header-anchor" href="#_10-16-私有变量" aria-label="Permalink to &quot;10.16 私有变量&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>javascript是没有私有变量的概念的    但是在函数中或者在局部作用域中的参数或者定义的变量  外部是不能访问的 那这些变量对于外部来说可以当做私有变量  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>外部如果想访问内部变量 内存函数使用外部函数的变量 可以在局部函数中通过闭包的方式返回给外部使用</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="第十二章-bom" tabindex="-1">第十二章 BOM <a class="header-anchor" href="#第十二章-bom" aria-label="Permalink to &quot;第十二章 BOM&quot;">​</a></h2><h3 id="_12-1-window对象" tabindex="-1">12.1 window对象 <a class="header-anchor" href="#_12-1-window对象" aria-label="Permalink to &quot;12.1 window对象&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BOM的核心是window对象 在浏览器中是ECMAScript的Global对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Global作用域中 var定义的变量是挂载到window上面的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">获取浏览器视口大小</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pageWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.innerWidth,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pageHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.innerHeight;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pageWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.compatMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CSS1Compat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检查页面是否属于标准模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pageWidht </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.clientWidth</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pageHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.clientHeight</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pageWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.body.clientWidth</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pageHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.body.clientHeight</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">导航与打开新窗口</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 第一个参数为目标地址  第二个参数为窗口名称</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">定时器</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JavaScript 在浏览器中是单线程执行的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 指定一段时间后指定某些带代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 指定每隔一段时间执行某些代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">都会返回一个定时ID 可以用 clearTimeout clearInterval 取消定时任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">一般来说尽量是不要使用setInterval 如果不主动取消 只能通过页面卸载清除</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">系统对话框</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">confirm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">alert 弹出一个警告框</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">confirm 弹出一个选择框</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prompt 弹出一个输入框</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="_12-2-location对象" tabindex="-1">12.2 location对象 <a class="header-anchor" href="#_12-2-location对象" aria-label="Permalink to &quot;12.2 location对象&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>location属性列表:</span></span>
<span class="line"><span>hash URL散列值 (#后面的字符串)</span></span>
<span class="line"><span>host 服务器名及端口号</span></span>
<span class="line"><span>hostname 服务器名</span></span>
<span class="line"><span>herf 当前完整的url</span></span>
<span class="line"><span>pathname URL中的路径</span></span>
<span class="line"><span>port 请求的端口</span></span>
<span class="line"><span>protocol 页面使用的协议</span></span>
<span class="line"><span>search URL 的查询字符串</span></span>
<span class="line"><span>username 域名前指定的用户名</span></span>
<span class="line"><span>password 页面前指定的密码</span></span>
<span class="line"><span>origin URL的源地址</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_12-3-navigator对象" tabindex="-1">12.3 navigator对象 <a class="header-anchor" href="#_12-3-navigator对象" aria-label="Permalink to &quot;12.3 navigator对象&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>navigator在各个浏览器都有不同 都有自己的属性</span></span>
<span class="line"><span>里面的属性和方法都是关于浏览器本身的属性 比如appVersion查看浏览器版本 mediaDevices 返回可用媒体设备 onLine检测是否联网</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_12-4-screen对象" tabindex="-1">12.4 screen对象 <a class="header-anchor" href="#_12-4-screen对象" aria-label="Permalink to &quot;12.4 screen对象&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>screen对象可以获取浏览器窗口显示的信息 比如获取屏幕像素宽高 screen.width screen.height</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_12-5-history对象" tabindex="-1">12.5 history对象 <a class="header-anchor" href="#_12-5-history对象" aria-label="Permalink to &quot;12.5 history对象&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>对于当前窗口 go() 方法 可以返回指定历史页面 负数为后退 正数为前进 如果历史页面不存在不做任何跳转</span></span>
<span class="line"><span>后退一页 history.back() 前进一页 history.forward()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="第十四章-dom" tabindex="-1">第十四章 DOM <a class="header-anchor" href="#第十四章-dom" aria-label="Permalink to &quot;第十四章 DOM&quot;">​</a></h2><h3 id="_14-1-节点层级" tabindex="-1">14.1 节点层级 <a class="header-anchor" href="#_14-1-节点层级" aria-label="Permalink to &quot;14.1 节点层级&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>document节点表示每个文档的根结点 唯一一个子节点是&lt;html&gt;元素  &lt;html&gt;元素我们称之为文档元素</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Node类型:</span></span>
<span class="line"><span>所有节点类型都继承自Node类型</span></span>
<span class="line"><span></span></span>
<span class="line"><span>节点关系:</span></span>
<span class="line"><span>文档中所有节点都与其他节点有关系</span></span>
<span class="line"><span>每个节点都有childNodes 属性 该属性返回所有子节点</span></span>
<span class="line"><span></span></span>
<span class="line"><span>节点操作:</span></span>
<span class="line"><span>appendChild()填在子节点末尾添加  insertBefore()有两个参数第一个参数为更新的节点第二个参数为插入位置的后节点 意思就是新节点会添加在传入的第二个参数节点前面  replaceChild()第一个参数为新节点 第二个参数为要替换的节点</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Document类型:</span></span>
<span class="line"><span>文档对象 document 是HTMLDocument 的实例 HTMLDocument继承自Document 表示整个HTML页面 document是window对象的实例</span></span>
<span class="line"><span></span></span>
<span class="line"><span>浏览器标题 document.title</span></span>
<span class="line"><span></span></span>
<span class="line"><span>获取完整的URL document.URL</span></span>
<span class="line"><span></span></span>
<span class="line"><span>获取域名 document.domain</span></span>
<span class="line"><span></span></span>
<span class="line"><span>获取来源 document.referrer</span></span>
<span class="line"><span></span></span>
<span class="line"><span>定位元素:</span></span>
<span class="line"><span>getElementById() 传入一个id值 区分大小写</span></span>
<span class="line"><span>getElementsByTagName() 传入一个标记名称 返回HTMLCollection 列表 提供一个额外的筛选方法 可以用过属性来筛选 通过namedItem()传入属性值来获取单一节点</span></span>
<span class="line"><span>getElementByname() 根据节点的name属性值来筛选 返回节点列表</span></span>
<span class="line"><span></span></span>
<span class="line"><span>文档写入:</span></span>
<span class="line"><span>document.write()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>属性操作:</span></span>
<span class="line"><span>getAttribute() 传入属性名称可以获取属性值</span></span>
<span class="line"><span>setAttribute() 两个参数 第一个属性名 第二个属性值 如果有该属性则覆盖</span></span>
<span class="line"><span>removeAttribute()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>创建元素:</span></span>
<span class="line"><span>document.createElement() 传入一个参数 标签名  返回一个节点 让后通过appendChild()添加至文档树</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h3 id="_14-2-dom编程" tabindex="-1">14.2 DOM编程 <a class="header-anchor" href="#_14-2-dom编程" aria-label="Permalink to &quot;14.2 DOM编程&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>动态脚本:</span></span>
<span class="line"><span>let script = document.createElement(&quot;script&quot;);</span></span>
<span class="line"><span>script.src = &quot;index.js&quot;;</span></span>
<span class="line"><span>document.body.appendChild(script);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>动态样式:</span></span>
<span class="line"><span>let link = document.createElement(&#39;link&#39;);</span></span>
<span class="line"><span>link.rel = &quot;stylesheet&quot;;</span></span>
<span class="line"><span>link.type = &quot;text/css&quot;;</span></span>
<span class="line"><span>link.href = &quot;index.css&quot;;</span></span>
<span class="line"><span>let head = document.getElementsByTagName(&quot;head&quot;)[0];</span></span>
<span class="line"><span>head.appendCHild(link);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MutationObserv 接口:</span></span>
<span class="line"><span>过给构造函数传入一个回调函数 生成观察者对象(Observe)</span></span>
<span class="line"><span>let observe = new MutationObserve((mutationRecords)=&gt;{console.log(&quot;Hello!&quot;)})</span></span>
<span class="line"><span>observe.observe(document.body,{attributes:true})</span></span>
<span class="line"><span>document.body.className = &#39;hello&#39; // 打印Hello</span></span>
<span class="line"><span></span></span>
<span class="line"><span>上面代码监控了 body的属性变化 如果body属性发生改变可以触发回调函数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="第十五章-dom扩展" tabindex="-1">第十五章 DOM扩展 <a class="header-anchor" href="#第十五章-dom扩展" aria-label="Permalink to &quot;第十五章 DOM扩展&quot;">​</a></h2><h3 id="_15-1-selectors-api" tabindex="-1">15.1 Selectors API <a class="header-anchor" href="#_15-1-selectors-api" aria-label="Permalink to &quot;15.1 Selectors API&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>querySelector() 方法接收CSS选择符参数 返回DOM树中查询到的第一个节点</span></span>
<span class="line"><span>querySelectorAll() 方法接收CSS选择符参数 返回多个结果 NodeList 的静态实例</span></span>
<span class="line"><span>matches() 返回布尔值 检测是否可以被querySelector查找</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_15-2-元素遍历" tabindex="-1">15.2 元素遍历 <a class="header-anchor" href="#_15-2-元素遍历" aria-label="Permalink to &quot;15.2 元素遍历&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_15-3-html5" tabindex="-1">15.3 HTML5 <a class="header-anchor" href="#_15-3-html5" aria-label="Permalink to &quot;15.3 HTML5&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>css扩展类:</span></span>
<span class="line"><span>getElementsByClassName() </span></span>
<span class="line"><span>clasList 节点的类名列表 可以通过add remove来操作class</span></span>
<span class="line"><span>&lt;div id=&quot;app&quot; data-id=&quot;123&quot; data-name=&quot;好好&quot;&gt;hello&lt;/div&gt;</span></span>
<span class="line"><span>let div = document.getElementById(&quot;app&quot;)</span></span>
<span class="line"><span>div.dataset.id</span></span>
<span class="line"><span>div.dataset.name</span></span>
<span class="line"><span>自定义属性 data-  通过dataset 取值  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>innerHtml: 会返回该节点所有后代HTML字符串 如果赋值则更新dom</span></span>
<span class="line"><span>outerHTMl: 会返回该节点本身和所有后代HTML字符串 如果赋值则更新dom</span></span>
<span class="line"><span></span></span>
<span class="line"><span>children 返回只包含Element 类型的子节点</span></span>
<span class="line"><span>contains() 确定节点是否是当前节点的子节点 返回布尔值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="第十六章-dom2-dom3" tabindex="-1">第十六章 DOM2 DOM3 <a class="header-anchor" href="#第十六章-dom2-dom3" aria-label="Permalink to &quot;第十六章 DOM2 DOM3&quot;">​</a></h2><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let app = document.getElementById(&quot;app&quot;)</span></span>
<span class="line"><span>app.style.cssText = ----</span></span>
<span class="line"><span>cssText可以获取元素css 也可以快速设置多个css</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>offsetHeight 元素在垂直方向占用的尺寸 盒模型高度</span></span>
<span class="line"><span>offsetWidth 元素在水平方向占用的像素尺寸 盒模型宽度</span></span>
<span class="line"><span>offsetLeft 元素距离左边框的距离</span></span>
<span class="line"><span>offsetTop 元素距离上边框的距离</span></span>
<span class="line"><span></span></span>
<span class="line"><span>元素尺寸 不算边框</span></span>
<span class="line"><span>clientHeight 内容区域高度 不算边框</span></span>
<span class="line"><span>clientWidth 内容区域宽度 不算边框</span></span>
<span class="line"><span></span></span>
<span class="line"><span>滚动尺寸</span></span>
<span class="line"><span>scrollHeight</span></span>
<span class="line"><span>scrollLeft</span></span>
<span class="line"><span>scrollTop</span></span>
<span class="line"><span>scrollWidth</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="第十七章-事件" tabindex="-1">第十七章 事件 <a class="header-anchor" href="#第十七章-事件" aria-label="Permalink to &quot;第十七章 事件&quot;">​</a></h2><h3 id="_17-1-事件流" tabindex="-1">17.1 事件流 <a class="header-anchor" href="#_17-1-事件流" aria-label="Permalink to &quot;17.1 事件流&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let btn = document.getElementById(&quot;app&quot;)</span></span>
<span class="line"><span>btn.addEventListener(&quot;click&quot;,()=&gt;{})</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>事件流包含两个阶段  事件捕获和事件冒泡</span></span>
<span class="line"><span>事件捕获是从根节点 document 传递到div 然后事件冒泡是从div 传递到document</span></span>
<span class="line"><span></span></span>
<span class="line"><span>阻止事件冒泡的方式</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1.event.stopPropagation();</span></span>
<span class="line"><span>事件处理过程中，阻止了事件冒泡，但不会阻击默认行为</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2.return false;</span></span>
<span class="line"><span>事件处理过程中，阻止了事件冒泡，也阻止了默认行为</span></span>
<span class="line"><span></span></span>
<span class="line"><span>事件类型:</span></span>
<span class="line"><span>用户界面事件 load 加载完成后触发(检测img元素是否加载完成) unload 页面卸载后触发</span></span>
<span class="line"><span>键盘事件 keydown 可以通过event.keyCode来判断按下的那个键</span></span>
<span class="line"><span>焦点事件 鼠标事件 滚轮事件 输入事件 合成事件</span></span>
<span class="line"><span></span></span>
<span class="line"><span>事件委托 利用事件冒泡原理 在最顶层做处理 依次判断事件源从哪个元素发出然后处理响应逻辑</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="第二十三章-json" tabindex="-1">第二十三章 JSON <a class="header-anchor" href="#第二十三章-json" aria-label="Permalink to &quot;第二十三章 JSON&quot;">​</a></h2><h3 id="_23-1-语法" tabindex="-1">23.1 语法 <a class="header-anchor" href="#_23-1-语法" aria-label="Permalink to &quot;23.1  语法&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>JSON 语法支持表示三种类型的值</span></span>
<span class="line"><span>简单值: 字符串 数值 布尔值 和 null</span></span>
<span class="line"><span>对象:对象表示有序键值对 每个值可以是简单值 也可以是复杂类型</span></span>
<span class="line"><span>数组: 数组表示可以通过数值索引访问的值的有序列表,数组的值可以是任意类型,包括简单值,对象,甚至其它数组</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_23-2-解析与序列化" tabindex="-1">23.2 解析与序列化 <a class="header-anchor" href="#_23-2-解析与序列化" aria-label="Permalink to &quot;23.2 解析与序列化&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>JSON 对象 有两个方法</span></span>
<span class="line"><span>stringify() 将JavaScript数据类型转为json类型 有三个参数 第一个转化对象 第二个过滤字段规则可以传对象里面键值的数组,转化结果就只包含传了的结果 第二个参数还可以是一个函数 该函数第一个参数是key 第二个为value 也可以根据key值过滤 第三个为字符串缩进起到美化输出的作用</span></span>
<span class="line"><span>parse() 将json类型转为JavaScript类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="第二十四章-网络请求与远程资源" tabindex="-1">第二十四章 网络请求与远程资源 <a class="header-anchor" href="#第二十四章-网络请求与远程资源" aria-label="Permalink to &quot;第二十四章 网络请求与远程资源&quot;">​</a></h2><h3 id="_24-1-xmlhttprequest-对象" tabindex="-1">24.1 XMLHttpRequest 对象 <a class="header-anchor" href="#_24-1-xmlhttprequest-对象" aria-label="Permalink to &quot;24.1 XMLHttpRequest 对象&quot;">​</a></h3><h2 id="第二十五章-客户端存储" tabindex="-1">第二十五章 客户端存储 <a class="header-anchor" href="#第二十五章-客户端存储" aria-label="Permalink to &quot;第二十五章 客户端存储&quot;">​</a></h2><h3 id="_25-1-cookie" tabindex="-1">25.1 cookie <a class="header-anchor" href="#_25-1-cookie" aria-label="Permalink to &quot;25.1 cookie&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>document.cookie </span></span>
<span class="line"><span></span></span>
<span class="line"><span>限制:</span></span>
<span class="line"><span>不超过300个cookit</span></span>
<span class="line"><span>每个cookit不超过4096字节</span></span>
<span class="line"><span>每个域不超过20个cookie</span></span>
<span class="line"><span>每个域不能超过81920字节</span></span>
<span class="line"><span>每个域能设置cookie总数也是受限制的,但不同浏览器的限制不同</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_25-2-web-storage" tabindex="-1">25.2 Web Storage <a class="header-anchor" href="#_25-2-web-storage" aria-label="Permalink to &quot;25.2 Web Storage&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>localStorage 本地持久化存储</span></span>
<span class="line"><span>方法取值:localStorage.getItem(&quot;name&quot;)</span></span>
<span class="line"><span>方法存值:localStorage.setItem(&quot;name&quot;,&quot;hello&quot;)</span></span>
<span class="line"><span>删除方法:localStorage.removeItem(&quot;name&quot;)]</span></span>
<span class="line"><span>属性取值:localStorage.name</span></span>
<span class="line"><span>属性存值:localStorage.name = &quot;hello&quot;</span></span>
<span class="line"><span>当Storage对象发生变化之后会在文档上触发storage事件</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sessionStorage</span></span>
<span class="line"><span>存储方式跟localStorage一样</span></span>
<span class="line"><span>值存储回话数据, 数据只会存储到浏览器关闭.这跟浏览器关闭时会消失的回话cookie类似</span></span>
<span class="line"><span></span></span>
<span class="line"><span>localStorage sessionStorage 存值限制为 每个源 5MB</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_25-3-indexdb" tabindex="-1">25.3 IndexDB <a class="header-anchor" href="#_25-3-indexdb" aria-label="Permalink to &quot;25.3 IndexDB&quot;">​</a></h3><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>是浏览器中存储结构化数据的一个方案 IndexDB使用对象存储而不是表格保存数据. IndexDB数据库就是在一个公共命名空间下的一组对象存储,类似于NoSQL风格的实现</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,120),l=[p];function t(r,h,c,d,b,o){return a(),n("div",null,l)}const m=s(e,[["render",t]]);export{k as __pageData,m as default};
